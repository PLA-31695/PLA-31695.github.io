<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习grid布局</title>
    <url>/2022/02/21/%E8%92%8B%E6%B4%AA%E5%85%89/</url>
    <content><![CDATA[<p>首先感谢阮一峰大神分享的教程</p>
<h1 id="一-、什么是grid布局"><a href="#一-、什么是grid布局" class="headerlink" title="一 、什么是grid布局"></a>一 、什么是grid布局</h1><p>网格布局（Grid）是最强大的 CSS 布局方案。</p>
<span id="more"></span>

<p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032501.png" alt="grid布局"></p>
<p>上图这样的布局，就是 Grid 布局的拿手好戏。</p>
<p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p>
<p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p>
<h1 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h1><p>学习 Grid 布局之前，需要了解一些基本概念。</p>
<h5 id="2-1-容器和项目"><a href="#2-1-容器和项目" class="headerlink" title="2.1 容器和项目"></a>2.1 容器和项目</h5><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p>
<p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<p>元素就不是项目。Grid 布局只对项目生效</p>
<h4 id="2-2-行和列"><a href="#2-2-行和列" class="headerlink" title="2.2 行和列"></a>2.2 行和列</h4><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032502.png"></p>
<p>上图中，水平的深色区域就是”行”，垂直的深色区域就是”列”。</p>
<h4 id="2-3-单元格"><a href="#2-3-单元格" class="headerlink" title="2.3 单元格"></a>2.3 单元格</h4><p>行和列的交叉区域，称为”单元格”（cell）。<br>正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。</p>
<h4 id="2-4-网格线"><a href="#2-4-网格线" class="headerlink" title="2.4 网格线"></a>2.4 网格线</h4><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>
<p>正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png"><br>上图是一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线</p>
<h1 id="三、容器属性"><a href="#三、容器属性" class="headerlink" title="三、容器属性"></a>三、容器属性</h1><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p>
<h4 id="3-1-display-属性"><a href="#3-1-display-属性" class="headerlink" title="3.1 display 属性"></a>3.1 display 属性</h4><p><span style="color:red">注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</span></p>
<h4 id="3-2-grid-template-columns-属性，grid-template-rows-属性"><a href="#3-2-grid-template-columns-属性，grid-template-rows-属性" class="headerlink" title="3.2 grid-template-columns 属性，grid-template-rows 属性"></a>3.2 grid-template-columns 属性，grid-template-rows 属性</h4><p>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 100px 100px;</span><br><span class="line">  grid-template-rows: 100px 100px 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码指定了一个三行三列的网格，列宽和行高都是100px。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png"></p>
<h4 id="（1）repeat"><a href="#（1）repeat" class="headerlink" title="（1）repeat()"></a>（1）repeat()</h4><p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(3, 100px);</span><br><span class="line">  grid-template-rows: repeat(3, 100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>repeat()重复某种模式也是可以的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: repeat(2, 100px 20px 80px);</span><br></pre></td></tr></table></figure>
<h4 id="（2）auto-fill-关键字"><a href="#（2）auto-fill-关键字" class="headerlink" title="（2）auto-fill 关键字"></a>（2）auto-fill 关键字</h4><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p>
<h4 id="（3）fr-关键字"><a href="#（3）fr-关键字" class="headerlink" title="（3）fr 关键字"></a>（3）fr 关键字</h4><p>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示两个相同宽度的列。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032509.png"></p>
<h4 id="3-3-grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性"><a href="#3-3-grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性" class="headerlink" title="3.3 grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性"></a>3.3 grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h4><p>grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  grid-row-gap: 20px;</span><br><span class="line">  grid-column-gap: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png"><br>grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式，语法如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure>
<p>如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。</p>
<h4 id="3-4-grid-auto-flow-属性"><a href="#3-4-grid-auto-flow-属性" class="headerlink" title="3.4 grid-auto-flow 属性"></a>3.4 grid-auto-flow 属性</h4><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。<br>grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p>
<h4 id="3-5-justify-items-属性，align-items-属性，place-items-属性"><a href="#3-5-justify-items-属性，align-items-属性，place-items-属性" class="headerlink" title="3.5 justify-items 属性，align-items 属性，place-items 属性"></a>3.5 justify-items 属性，align-items 属性，place-items 属性</h4><p>justify-items属性设置单元格内容的水平位置（左中右），align-items属性设置单元格内容的垂直位置（上中下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  align-items: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>place-items属性是align-items属性和justify-items属性的合并简写形式。<br>如果省略第二个值，则浏览器认为与第一个值相等。</p>
<h4 id="3-6-justify-content-属性-align-content-属性，place-content-属性"><a href="#3-6-justify-content-属性-align-content-属性，place-content-属性" class="headerlink" title="3.6 justify-content 属性,align-content 属性，place-content 属性"></a>3.6 justify-content 属性,align-content 属性，place-content 属性</h4><p>justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>place-content属性是align-content属性和justify-content属性的合并简写形式。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
