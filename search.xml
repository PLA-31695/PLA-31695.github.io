<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习grid布局</title>
    <url>/2022/02/21/%E8%92%8B%E6%B4%AA%E5%85%89/</url>
    <content><![CDATA[<p>首先感谢阮一峰大神分享的教程</p>
<h1 id="一-、什么是grid布局"><a href="#一-、什么是grid布局" class="headerlink" title="一 、什么是grid布局"></a>一 、什么是grid布局</h1><p>网格布局（Grid）是最强大的 CSS 布局方案。</p>
<span id="more"></span>

<p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032501.png" alt="grid布局"></p>
<p>上图这样的布局，就是 Grid 布局的拿手好戏。</p>
<p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p>
<p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p>
<h1 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h1><p>学习 Grid 布局之前，需要了解一些基本概念。</p>
<h5 id="2-1-容器和项目"><a href="#2-1-容器和项目" class="headerlink" title="2.1 容器和项目"></a>2.1 容器和项目</h5><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p>
<p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<p>元素就不是项目。Grid 布局只对项目生效</p>
<h4 id="2-2-行和列"><a href="#2-2-行和列" class="headerlink" title="2.2 行和列"></a>2.2 行和列</h4><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032502.png"></p>
<p>上图中，水平的深色区域就是”行”，垂直的深色区域就是”列”。</p>
<h4 id="2-3-单元格"><a href="#2-3-单元格" class="headerlink" title="2.3 单元格"></a>2.3 单元格</h4><p>行和列的交叉区域，称为”单元格”（cell）。<br>正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。</p>
<h4 id="2-4-网格线"><a href="#2-4-网格线" class="headerlink" title="2.4 网格线"></a>2.4 网格线</h4><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>
<p>正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png"><br>上图是一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线</p>
<h1 id="三、容器属性"><a href="#三、容器属性" class="headerlink" title="三、容器属性"></a>三、容器属性</h1><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p>
<h4 id="3-1-display-属性"><a href="#3-1-display-属性" class="headerlink" title="3.1 display 属性"></a>3.1 display 属性</h4><p><span style="color:red">注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</span></p>
<h4 id="3-2-grid-template-columns-属性，grid-template-rows-属性"><a href="#3-2-grid-template-columns-属性，grid-template-rows-属性" class="headerlink" title="3.2 grid-template-columns 属性，grid-template-rows 属性"></a>3.2 grid-template-columns 属性，grid-template-rows 属性</h4><p>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 100px 100px;</span><br><span class="line">  grid-template-rows: 100px 100px 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码指定了一个三行三列的网格，列宽和行高都是100px。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png"></p>
<h4 id="（1）repeat"><a href="#（1）repeat" class="headerlink" title="（1）repeat()"></a>（1）repeat()</h4><p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(3, 100px);</span><br><span class="line">  grid-template-rows: repeat(3, 100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>repeat()重复某种模式也是可以的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: repeat(2, 100px 20px 80px);</span><br></pre></td></tr></table></figure>
<h4 id="（2）auto-fill-关键字"><a href="#（2）auto-fill-关键字" class="headerlink" title="（2）auto-fill 关键字"></a>（2）auto-fill 关键字</h4><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p>
<h4 id="（3）fr-关键字"><a href="#（3）fr-关键字" class="headerlink" title="（3）fr 关键字"></a>（3）fr 关键字</h4><p>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示两个相同宽度的列。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032509.png"></p>
<h4 id="3-3-grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性"><a href="#3-3-grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性" class="headerlink" title="3.3 grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性"></a>3.3 grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h4><p>grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  grid-row-gap: 20px;</span><br><span class="line">  grid-column-gap: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png"><br>grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式，语法如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure>
<p>如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。</p>
<h4 id="3-4-grid-auto-flow-属性"><a href="#3-4-grid-auto-flow-属性" class="headerlink" title="3.4 grid-auto-flow 属性"></a>3.4 grid-auto-flow 属性</h4><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。<br>grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p>
<h4 id="3-5-justify-items-属性，align-items-属性，place-items-属性"><a href="#3-5-justify-items-属性，align-items-属性，place-items-属性" class="headerlink" title="3.5 justify-items 属性，align-items 属性，place-items 属性"></a>3.5 justify-items 属性，align-items 属性，place-items 属性</h4><p>justify-items属性设置单元格内容的水平位置（左中右），align-items属性设置单元格内容的垂直位置（上中下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  align-items: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>place-items属性是align-items属性和justify-items属性的合并简写形式。<br>如果省略第二个值，则浏览器认为与第一个值相等。</p>
<h4 id="3-6-justify-content-属性-align-content-属性，place-content-属性"><a href="#3-6-justify-content-属性-align-content-属性，place-content-属性" class="headerlink" title="3.6 justify-content 属性,align-content 属性，place-content 属性"></a>3.6 justify-content 属性,align-content 属性，place-content 属性</h4><p>justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>place-content属性是align-content属性和justify-content属性的合并简写形式。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>利用递归函数实现深拷贝</title>
    <url>/2022/02/24/%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h4 id="什么是深拷贝和浅拷贝"><a href="#什么是深拷贝和浅拷贝" class="headerlink" title="什么是深拷贝和浅拷贝"></a>什么是深拷贝和浅拷贝</h4><h5 style="color:red"> 说白点就是浅拷贝是指对象复制的时候只复制一层；深拷贝是指复制对象的所有层级。</h5>
深拷贝和浅拷贝，主要是对象发生复制的时候，根据复制的层级不同来区分的,对于JavaScript数组等复杂的数据类型来说，将其赋值给其它变量，其实只是复制了对象的地址给它，两个变量指向的是同一个对象，因此普通的赋值既不是深拷贝也不是浅拷贝。


<span id="more"></span>
<ul>
<li>简单点就是：</li>
<li>1.浅拷贝：也就是拷贝A对象里面的数据，但是不拷贝A对象里面的子对象</li>
<li>2.深拷贝：会克隆出一个对象，数据相同，但是引用地址不同（就是拷贝A对象里面的数据，而且拷贝它里面的子对象）</li>
</ul>
<h4 id="实现浅拷贝方法"><a href="#实现浅拷贝方法" class="headerlink" title="实现浅拷贝方法"></a>实现浅拷贝方法</h4><p>利用Object.assign(newObject,oldOject)即可实现</p>
<h4 id="实现深拷贝的方法"><a href="#实现深拷贝的方法" class="headerlink" title="实现深拷贝的方法"></a>实现深拷贝的方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    name: &#x27;jhg&#x27;,</span><br><span class="line">    msg: &#123;</span><br><span class="line">        age:12</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var o = &#123;&#125;</span><br><span class="line">function deepCopy(newObj, oldObj) &#123;   //封装深拷贝函数</span><br><span class="line">    for (var k in oldObj) &#123;           //遍历对象属性</span><br><span class="line">        var item = oldObj[k]</span><br><span class="line">        if (item instanceof Object) &#123;   //判断属性是复杂数据类型还是基本数据类型</span><br><span class="line">            newObj[k] = &#123;&#125;</span><br><span class="line">            deepCopy( newObj[k],item)   //递归，进行深拷贝</span><br><span class="line">        &#125;else if (item instanceof Array) &#123;</span><br><span class="line">            newObj[k] = []</span><br><span class="line">            deepCopy( newObj[k],item)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            newObj[k] = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepCopy(o,obj)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>-前端 -javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/2022/02/24/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="关于清除浮动的几种方式"><a href="#关于清除浮动的几种方式" class="headerlink" title="关于清除浮动的几种方式"></a>关于清除浮动的几种方式</h1><h4 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h4><p>由于给元素添加了float样式后，元素会脱离文档流，导致没有设置高度的父元素会出现高度塌陷。</p>
<h4 id="1-给父元素设置高度"><a href="#1-给父元素设置高度" class="headerlink" title="1.给父元素设置高度"></a>1.给父元素设置高度</h4><p>给父元素设置相应的高度，但是这个方法有很多局限性，所以不常用</p>
<h4 id="2-在浮动元素的后面添加一个空div，css设置为clear：both"><a href="#2-在浮动元素的后面添加一个空div，css设置为clear：both" class="headerlink" title="2.在浮动元素的后面添加一个空div，css设置为clear：both"></a>2.在浮动元素的后面添加一个空div，css设置为clear：both</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3-给浮动元素设置overflow-hidden"><a href="#3-给浮动元素设置overflow-hidden" class="headerlink" title="3.给浮动元素设置overflow:hidden"></a>3.给浮动元素设置overflow:hidden</h4><h4 id="4-推荐使用"><a href="#4-推荐使用" class="headerlink" title="4.推荐使用"></a>4.推荐使用</h4><p>利用伪类元素添加clean：both</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.parent::after&#123;</span><br><span class="line">       content:&#x27;&#x27;;</span><br><span class="line">       display: block;</span><br><span class="line">       clear: both;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>keep-alive的使用和详解</title>
    <url>/2022/02/24/keep-alive%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="keep-alive-是什么"><a href="#keep-alive-是什么" class="headerlink" title="keep-alive 是什么"></a>keep-alive 是什么</h4><p> keep-alive 是 Vue 的内置组件，当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p>
<h4 id="keep-alive-有什么用"><a href="#keep-alive-有什么用" class="headerlink" title="keep-alive 有什么用"></a>keep-alive 有什么用</h4><p>  在组件切换过程中将状态保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验性</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ol>
<li>activated<br>在 keep-alive 组件激活时调用，该钩子函数在服务器端渲染期间不被调用。</li>
<li>deactivated<br>在 keep-alive 组件停用时调用，该钩子在服务器端渲染期间不被调用。</li>
</ol>
<p><strong>注意：</strong> 只有组件被 keep-alive 包裹时，这两个生命周期函数才会被调用，如果作为正常组件使用，是不会被调用的，以及在 2.1.0 版本之后，使用 exclude 排除之后，就算被包裹在 keep-alive 中，这两个钩子函数依然不会被调用！另外，在服务端渲染时，此钩子函数也不会被调用。</p>
<p>原文链接：<a href="https://blog.csdn.net/fu983531588/article/details/90321827">https://blog.csdn.net/fu983531588/article/details/90321827</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器向服务器发送请求的具体过程</title>
    <url>/2022/02/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="当输入url时，发生了什么"><a href="#当输入url时，发生了什么" class="headerlink" title="当输入url时，发生了什么"></a>当输入url时，发生了什么</h4><p>当我们在浏览器输入地址时，域名解析服务器会把我们输入的域名解析成IP（因为IP地址我们很难记得住，所以我们发明了域名），这个过程就叫DNS解析，其实DNS就是个存储域名和IP地址的一个数据库。有了IP地址后，我们就可以在互联网中找到指定的服务器了。</p>
<h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p>当我们找到服务器的时候，在发送数据之前我们还得建立TCP链接，因为建立TCP链接后，客户端和服务器端就可以建立通道以用来发送数据。于是就有了建立通道前的三次握手。<br><img src="https://t10.baidu.com/it/u=2590032753,2466318043&fm=173&app=49&f=JPEG?w=640&h=716&s=E7F239D247AFCCEA106594580300D072"><br>1.第一次握手<br>客户端发送SYN数据包表示请求连接<br>2.第二次握手<br>服务器响应SYN和ACK数据包表示同意建立连接<br>3.第三次握手<br>客户端发送ACK数据包表示成功连接。</p>
<h4 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h4><p>当客户端建立连接之后，浏览器发送HTTP请求报文给服务器，报文的格式有请求行，请求头和请求数据组成.<br>1.请求行组成：请求方法，请求地址，HTTP协议版本<br>2.请求头组成：一些关于浏览器信息由键值对组成，一行一对。</p>
<h4 id="响应HTTP请求"><a href="#响应HTTP请求" class="headerlink" title="响应HTTP请求"></a>响应HTTP请求</h4><p>当服务器收到HTTP报文时，会返回响应报文，报文的格式有状态行，响应头部和响用数据</p>
<ol>
<li>状态行最重要的就是三个数字<br>常见的状态码：<br>200 - 请求成功<br>301 - 资源（网页等）被永久转移到其它URL<br>404 - 请求的资源（网页等）不存在<br>500 - 内部服务器错误</li>
</ol>
<h4 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h4><p>浏览器在接受到服务器的响应后，页面开始进行渲染，其中包括HTML，CSS，和javascript等文件，客户端就可以看到页面的内容。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>服务器</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>关于reduce的使用</title>
    <url>/2022/02/27/%E5%85%B3%E4%BA%8Ereduce%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>同时部署github、gitee和conding</title>
    <url>/2022/03/08/%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2github%E3%80%81gitee%E5%92%8Cconding/</url>
    <content><![CDATA[<p>工作原因需要用到coding，但是以前用的是github，所以需要在电脑上同时使用github和coding</p>
<h4 id="配置SSh"><a href="#配置SSh" class="headerlink" title="配置SSh"></a>配置SSh</h4><p>首先需要生成三个.ssh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;your email@example.com&quot;		</span><br></pre></td></tr></table></figure>
<p>和以往不同的是现在不能一直回车，需要区分这三个文件（默认是id_rsa）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Users/you/.ssh/id_rsa_github   //这是github的ssh文件</span><br><span class="line">/Users/you/.ssh/id_rsa_coding   //这是coding的ssh文件</span><br><span class="line">/Users/you/.ssh/id_rsa_gitee     //这是gitee的ssh文件</span><br></pre></td></tr></table></figure>
<h4 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建config文件</h4><p>接下来 我们创建一个config文件，写入一些相应的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ touch config   //创建config文件</span><br></pre></td></tr></table></figure>
<p>需要写入的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_github   //这是ssh文件的路径</span><br><span class="line"> </span><br><span class="line">Host conding.com</span><br><span class="line">  HostName git.coding.net</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_coding</span><br><span class="line">  </span><br><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="将ssh加入agent"><a href="#将ssh加入agent" class="headerlink" title="将ssh加入agent"></a>将ssh加入agent</h4><p>我们先使用ssh-add -D将agent中的先删除，然后再依次添加。如果出现Could not open a connection to your authentication agent<br>则使用 ssh-agent bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-add -D</span><br><span class="line">$ ssh-add id_rsa_github id_rsa_coding id_rsa_gitee</span><br></pre></td></tr></table></figure>
<p>到此为止，我就完成了配置，接下来就可以把公钥填入相应的平台了<br>我们可以分别用ssh -T 命令来测试是否连通。<br>如果出现port 22 … connection time out 将端口号改为443就是了<br>具体如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_github   //这是ssh文件的路径</span><br><span class="line">  Port 443</span><br><span class="line"> </span><br><span class="line">Host conding.com</span><br><span class="line">  HostName git.coding.net</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_coding</span><br><span class="line">  Port 443</span><br><span class="line">  </span><br><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git提交时忽略dist文件夹</title>
    <url>/2022/03/09/git%E6%8F%90%E4%BA%A4%E6%97%B6%E5%BF%BD%E7%95%A5dist%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h4 id="忽略dist文件夹"><a href="#忽略dist文件夹" class="headerlink" title="忽略dist文件夹"></a>忽略dist文件夹</h4><p>由于我们向仓库提交文件时不需要dist和node_module文件夹，所以我们需要忽略这两个文件</p>
<h4 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建.gitignore文件</h4><p>以HbuildX为例我们创建一个自定义文件，取名为.gitignore</p>
<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/unpackage/dist_</span><br><span class="line">/node_module</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>categories:github</tag>
      </tags>
  </entry>
</search>
